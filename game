<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=300, initial-scale=1.0"/> 
  <!-- Nota: La viewport √® impostata in modo da mantenere la larghezza fissa per il gioco -->
  <title>Ski Track Simulator - Replay Feature</title>
  <style>
    /* ==============================
       CSS SECTION
    ============================== */

    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
    }

    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      font-family: Arial, sans-serif;
      background: #f0f0f0;
    }

    /* Campo di gioco a dimensioni fisse (300px x 520px) */
    .container {
      position: relative;
      width: 300px;
      height: 520px;
      background-color: #ffffff;
      border: 2px solid #ccc;
      border-radius: 10px;
      margin-top: 20px;
      box-sizing: border-box;
    }

    canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      cursor: crosshair;
    }

    /* Etichetta in alto a sinistra per SuperG / Gigante / Speciale (cliccabile) */
    #modeLabel {
      position: absolute;
      top: 10px;
      left: 10px;
      color: blue;
      font-size: 14px;
      font-weight: bold;
      margin: 0;
      padding: 0;
      cursor: pointer;  
    }

    /* Bottoni di controllo - tutti senza sfondo, solo emoji */
    button {
      border: none;
      background: none;
      cursor: pointer;
      font-size: 18px;
      line-height: 1;
      margin: 0;
      padding: 0;
      color: black; 
    }
    button:hover {
      opacity: 0.7; 
    }

    /* Posizioni specifiche per i bottoni icona */
    #sameTrack {
      position: absolute;
      bottom: 10px;
      left: 10px;
    }
    #replayButton {
      /* Bottone Replay: icona ‚èØÔ∏è
         Posizionato accanto a Same Run */
      position: absolute;
      bottom: 10px;
      left: 50px; /* leggermente a destra di sameTrack */
    }
    #differentTrack {
      position: absolute;
      bottom: 10px;
      right: 10px;
    }
    #chronoButton {
      position: absolute;
      top: 10px;
      right: 10px;
    }

    /* Overlay (Chrono) -> solo la Top 5 */
    .overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 9999;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .hidden {
      display: none;
    }

    .overlay-content {
      position: relative;
      background-color: #fff;
      border-radius: 10px;
      padding: 20px;
      width: 90%;
      max-width: 700px; 
      box-sizing: border-box;
    }

    #closeOverlay {
      position: absolute;
      top: 10px;
      left: 10px;
      background-color: #dc3545;
      font-size: 14px;
      padding: 5px 10px;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    #closeOverlay:hover {
      background-color: #c82333;
    }

    /* Sfruttiamo pi√π spazio per la leaderboard */
    .leaderboard-container {
      display: block; 
      width: 100%;
      margin-top: 10px;
    }

    .leaderboard {
      width: 80%; 
      margin: 0 auto;
    }

    .leaderboard h2 {
      text-align: center;
      margin: 10px 0;
    }

    ol {
      border: 1px solid #ccc;
      border-radius: 5px;
      list-style: decimal inside;
      min-height: 100px;
      padding: 10px;
      margin: 0;
    }

    li {
      padding: 5px 0;
    }

    /* Final Time, avvisi e controlli in basso */
    .info-container {
      margin-top: 13px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    #finalTimeOutput {
      margin: -10px 0;
      font-weight: bold;
    }
    #statusOutput {
      margin: 15px 0;
      font-weight: bold;
      color: red;
    }

    .controls-row {
      display: flex; 
      flex-direction: row;
      align-items: center;
      justify-content: center;
      gap: 5px; 
      margin-top: -10px;
    }

    #playerNameInput {
      width: 22%; /* Ridotto del 30% circa */
      min-width: 80px;
      padding: 2px;
    }

    #savedTracksSelect {
      padding: 2px; 
      width: 94px; /* Aumentato del 30% circa */
    }

    #loadTrackButton, 
    #deleteTrackButton {
      font-size: 18px;  
      line-height: 1;
    }
  </style>
  <!-- Includiamo FileSaver.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
  <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
  <style>
    .tutorial-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .tutorial-content {
      background: white;
      padding: 30px;
      border-radius: 10px;
      max-width: 500px;
      width: 90%;
      position: relative;
    }

    .tutorial-slide {
      text-align: center;
    }

    .tutorial-nav {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 20px;
    }

    .tutorial-dots {
      display: flex;
      justify-content: center;
      gap: 8px;
      margin: 20px 0;
    }

    .dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: #ccc;
      cursor: pointer;
    }

    .dot.active {
      background: #007bff;
    }

    .close-button {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
    }

    .nav-button {
      padding: 8px 16px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    .nav-button:disabled {
      background: #ccc;
    }

    .skip-button {
      background: none;
      border: none;
      color: #666;
      cursor: pointer;
      text-decoration: underline;
    }
  </style>
</head>

<body>
  <div id="tutorial-root"></div>
  <div class="container">
    <canvas id="canvas"></canvas>

    <!-- Label ‚ÄúSuperG / Gigante / Speciale‚Äù -->
    <p id="modeLabel"></p>

    <!-- Bottoni-icona di controllo in basso/alto -->
    <button id="sameTrack" title="Same Run">üîÅ</button>
    <button id="replayButton" title="Replay">‚èØÔ∏è</button>
    <button id="differentTrack" title="New Run">‚ú®</button>
    <button id="chronoButton" title="Chrono">‚è∞</button>

    <!-- Overlay classifica -->
    <div id="chronoOverlay" class="overlay hidden">
      <div class="overlay-content">
        <button id="closeOverlay">X</button>
        <div class="leaderboard-container">
          <div class="leaderboard">
            <h2>Top 5</h2>
            <ol id="leaderboardList"></ol>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Final Time, avvisi e controlli (in basso) -->
  <div class="info-container">
    <p id="finalTimeOutput">‚è∞1'00"000'''</p>
    <p id="statusOutput"></p>

    <div class="controls-row">
      <input type="text" id="playerNameInput" placeholder="Your name"/>
      <select id="savedTracksSelect">
        <option value="">Track</option>
      </select>
      <button id="loadTrackButton" title="Load">üì•</button>
      <button id="deleteTrackButton" title="Delete">üóëÔ∏è</button>
      <button id="exportButton" title="Esporta Pista">üì§</button>
      
      <!-- NUOVO: Input file nascosto -->
      <input type="file" id="fileInput" accept=".json" style="display:none;"/>
      
      <button id="importButton">&#128193</button>
    </div>
  </div>

  <script>
    /* ==================================
       JAVASCRIPT con funzione Replay
       ================================== */

    const PATH_LENGTH_SCALING = 500;
    const PENALTY_WEIGHT      = 0.5;

    const canvas = document.getElementById('canvas');
    const ctx    = canvas.getContext('2d');

    const finalTimeOutput = document.getElementById('finalTimeOutput');
    const statusOutput    = document.getElementById('statusOutput');

    const sameTrackButton      = document.getElementById('sameTrack');
    const replayButton         = document.getElementById('replayButton');
    const differentTrackButton = document.getElementById('differentTrack');
    const chronoButton         = document.getElementById('chronoButton');
    const chronoOverlay        = document.getElementById('chronoOverlay');
    const closeOverlay         = document.getElementById('closeOverlay');

    const modeLabel            = document.getElementById('modeLabel');

    const playerNameInput      = document.getElementById('playerNameInput');

    const savedTracksSelect    = document.getElementById('savedTracksSelect');
    const loadTrackButton      = document.getElementById('loadTrackButton');
    const deleteTrackButton    = document.getElementById('deleteTrackButton');

    let bestTimes      = [];
    let currentTrack   = null;
    let currentTrackName = null;
    let gates          = [];

    // Punti: salveremo (x, y, t)
    let points         = [];
    let drawing        = false;
    let startTime      = 0;
    let startPoint     = { x: 0, y: 0 };
    let finishRect     = { x: 0, y: 0, width: 0, height: 10 };
    let intersectedGates = new Set();

    // Overlay top 5
    chronoButton.addEventListener('click', () => {
      chronoOverlay.classList.remove('hidden');
    });
    closeOverlay.addEventListener('click', () => {
      chronoOverlay.classList.add('hidden');
    });

    // Impostiamo le dimensioni fisse
    function resizeCanvas() {
      canvas.width = 300;
      canvas.height = 520;
      startPoint = { x: canvas.width / 2, y: 20 };
      const finishLineX1 = canvas.width / 2 - 20;
      const finishLineY1 = canvas.height - 30;
      finishRect = {
        x: finishLineX1,
        y: finishLineY1,
        width: 40,
        height: 10
      };
    }

    function drawTrack(track) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawStartPoint();
      drawFinishArea();

      if(!track) {
        gates = generateGates();
        currentTrack = gates;
        currentTrackName = null;
      } else {
        gates = track;
      }
      drawGates(gates);
      setModeLabel(gates.length);
    }

    function drawStartPoint() {
      ctx.font = '18px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';  
      ctx.fillText('üè†', startPoint.x, startPoint.y);
    }

    function drawFinishArea() {
      const { x, y, width, height } = finishRect;
      const squareSize = width / 8;
      const rowCount = Math.floor(height / (width / 8));
      for (let row = 0; row < rowCount; row++) {
          for (let col = 0; col < 8; col++) {
              ctx.fillStyle = (row + col) % 2 === 0 ? 'black' : '#F0F0F0';
              ctx.fillRect(x + col * squareSize, y + row * squareSize, squareSize, squareSize);
          }
      }
    }

    function drawGates(gatesArray) {
      for(const gate of gatesArray) {
        const { x, y, color, line } = gate;
        ctx.fillStyle = color;
        ctx.beginPath();
        if(color === 'red') {
          ctx.moveTo(x - 5, y - 5);
          ctx.lineTo(x + 5, y);
          ctx.lineTo(x - 5, y + 5);
        } else {
          ctx.moveTo(x + 5, y - 5);
          ctx.lineTo(x - 5, y);
          ctx.lineTo(x + 5, y + 5);
        }
        ctx.closePath();
        ctx.fill();
        ctx.strokeStyle = 'transparent';
        ctx.beginPath();
        ctx.moveTo(line.x1, line.y1);
        ctx.lineTo(line.x2, line.y2);
        ctx.stroke();
      }
    }

    function generateGates() {
      const gateCount = Math.floor(Math.random() * 5) + 6;
      const startWithRedRight = Math.random() < 0.5;
      let isRed = startWithRedRight;

      const newGates = [];
      for (let i = 0; i < gateCount; i++) {
        const direction = isRed ? 1 : -1;
        const x = isRed
            ? Math.random() * (canvas.width / 2 - 20) + canvas.width / 2
            : Math.random() * (canvas.width / 2 - 20) + 20;
        const y = 60 + i * ((canvas.height - 120) / gateCount);
        const color = isRed ? 'red' : 'blue';
        newGates.push({
          x, 
          y, 
          color,
          line: { x1: x, y1: y, x2: x + direction * 100, y2: y }
        });
        isRed = !isRed;
      }
      return newGates;
    }

    function setModeLabel(gateCount){
      if(gateCount === 6 || gateCount === 7) {
        modeLabel.textContent = 'üíæSuperG';
      } else if(gateCount === 8) {
        modeLabel.textContent = 'üíæGigante';
      } else if(gateCount === 9 || gateCount === 10) {
        modeLabel.textContent = 'üíæSpeciale';
      } else {
        modeLabel.textContent = '';
      }
    }

    function resetTrack(track = null, resetLeaderboards = false) {
      drawing = false;
      points = [];
      intersectedGates.clear();
      finalTimeOutput.textContent = "Final Time: 1'00\"000'''";
      statusOutput.textContent = '';
      if(resetLeaderboards){
        bestTimes = [];
        updateLeaderboard();
      }
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawTrack(track);
    }

    // Gestione disegno con mouse
    function isNearStartPoint(x, y) {
      const dist = Math.sqrt((x - startPoint.x) ** 2 + (y - startPoint.y) ** 2);
      return (dist <= 20);
    }
    canvas.addEventListener('mousedown', handleMouseDown);
    canvas.addEventListener('mousemove', handleMouseMove);
    canvas.addEventListener('mouseup', handleMouseUp);

    function handleMouseDown(e){
      const { x, y } = getMouseCoords(e);
      if(!isNearStartPoint(x, y)){
        statusOutput.textContent = 'False start! Try again!';
        return;
      }
      drawing = true;
      points = [];
      startTime = performance.now();
      statusOutput.textContent = '';
      ctx.beginPath();
      points.push({ x, y, t: 0 });
      ctx.moveTo(x, y);
    }
    function handleMouseMove(e){
      if(!drawing) return;
      const { x, y } = getMouseCoords(e);
      const now = performance.now() - startTime;
      points.push({ x, y, t: now });
      ctx.lineTo(x, y);
      ctx.strokeStyle = 'grey';
      ctx.lineWidth = 1.5;
      ctx.stroke();
      checkIntersections();
    }
    function handleMouseUp(e){
      if(!drawing)return;
      drawing = false;
    }

    // Supporto touch
    canvas.addEventListener('touchstart', handleTouchStart);
    canvas.addEventListener('touchmove', handleTouchMove);
    canvas.addEventListener('touchend', handleTouchEnd);

    function handleTouchStart(e){
      e.preventDefault();
      const { x, y } = getMouseCoords(e);
      if(!isNearStartPoint(x, y)){
        statusOutput.textContent = 'You must start from the start point!';
        return;
      }
      drawing = true;
      points = [];
      startTime = performance.now();
      statusOutput.textContent = '';
      ctx.beginPath();
      points.push({ x, y, t: 0 });
      ctx.moveTo(x, y);
    }
    function handleTouchMove(e){
      e.preventDefault();
      if(!drawing)return;
      const { x, y } = getMouseCoords(e);
      const now = performance.now() - startTime;
      points.push({ x, y, t: now });
      ctx.lineTo(x, y);
      ctx.strokeStyle = 'grey';
      ctx.lineWidth = 1.5;
      ctx.stroke();
      checkIntersections();
    }
    function handleTouchEnd(e){
      e.preventDefault();
      if(!drawing)return;
      drawing = false;
    }

    function checkIntersections(){
      for(let i = 1; i < points.length; i++){
        const p1 = points[i - 1], p2 = points[i];
        for(const [index, gate] of gates.entries()){
          if(linesIntersect(p1.x, p1.y, p2.x, p2.y,
                            gate.line.x1, gate.line.y1,
                            gate.line.x2, gate.line.y2)){
            intersectedGates.add(index);
          }
        }
        if(isSegmentInFinishArea(p1, p2, finishRect)){
          if(intersectedGates.size === gates.length){
            finishRun();
          } else {
            statusOutput.textContent = 'You missed a gate!';
            drawing = false;
          }
          return;
        }
      }
    }
    function isSegmentInFinishArea(p1, p2, rect){
      if((p1.y < rect.y && p2.y < rect.y) ||
         (p1.y > rect.y + rect.height && p2.y > rect.y + rect.height)) return false;
      if((p1.x < rect.x && p2.x < rect.x) ||
         (p1.x > rect.x + rect.width && p2.x > rect.x + rect.width)) return false;
      return true;
    }
    function linesIntersect(x1, y1, x2, y2, x3, y3, x4, y4){
      const det = (x2 - x1) * (y4 - y3) - (y2 - y1) * (x4 - x3);
      if(det === 0) return false;
      const lambda = ((y4 - y3) * (x4 - x1) + (x3 - x4) * (y4 - y1)) / det;
      const gamma = ((y1 - y2) * (x4 - x1) + (x2 - x1) * (y4 - y1)) / det;
      return (0 < lambda && lambda < 1 && 0 < gamma && gamma < 1);
    }

    function finishRun(){
      drawing = false;
      const endTime = performance.now();
      const elapsedTime = endTime - startTime;
      let totalLength = 0;
      for(let i = 1; i < points.length; i++){
        const dx = points[i].x - points[i - 1].x;
        const dy = points[i].y - points[i - 1].y;
        totalLength += Math.sqrt(dx * dx + dy * dy);
      }
      const finalTimeSeconds = calculateFinalTime(elapsedTime, totalLength);
      finalTimeOutput.textContent = `Final Time: ${formatTime(finalTimeSeconds)}`;
      statusOutput.textContent = 'Finished!';
      updateTimes(finalTimeSeconds);
    }

    function calculateFinalTime(actualTimeMs, pathLength){
      const timeInSeconds = actualTimeMs / 1000;
      const penalty = PENALTY_WEIGHT * (pathLength / PATH_LENGTH_SCALING);
      return 60 + timeInSeconds + penalty;
    }
    function formatTime(seconds){
      const minutes = Math.floor(seconds / 60);
      const remaining = (seconds % 60).toFixed(3);
      return `${minutes}'${remaining.replace('.', '"')}'''`;
    }

    /* ======================================
       REPLAY a velocit√† reale (bottone ‚èØÔ∏è)
       ====================================== */
    replayButton.addEventListener('click', replayTrajectory);
    function replayTrajectory(){
      if(points.length < 2){
        statusOutput.textContent = "No run to replay!";
        return;
      }
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawStartPoint();
      drawFinishArea();
      drawGates(gates);
      let i = 0;
      function step(){
        if(i >= points.length - 1) return;
        ctx.beginPath();
        ctx.moveTo(points[i].x, points[i].y);
        ctx.lineTo(points[i + 1].x, points[i + 1].y);
        ctx.strokeStyle = 'grey';
        ctx.lineWidth = 1.5;
        ctx.stroke();
        const dt = points[i + 1].t - points[i].t;
        i++;
        if(i < points.length - 1){
          setTimeout(step, dt);
        }
      }
      setTimeout(step, 0);
    }

    // Aggiornamento tempi e bestTimes
    function updateTimes(timeInSeconds){
      const nameValue = playerNameInput.value.trim() || "Anonymous";
      const newResult = { name: nameValue, time: timeInSeconds };
      bestTimes.push(newResult);
      bestTimes.sort((a, b) => a.time - b.time);
      if(bestTimes.length > 5){
        bestTimes.length = 5;
      }
      updateLeaderboard();
      autoSaveTrackTimes();
    }
    function updateLeaderboard(){
      const leaderboardList = document.getElementById('leaderboardList');
      leaderboardList.innerHTML = '';
      bestTimes.forEach((entry) => {
        const li = document.createElement('li');
        li.textContent = `${entry.name} - ${formatTime(entry.time)}`;
        leaderboardList.appendChild(li);
      });
    }

    /* Persistenza localStorage */
    function autoSaveTrackTimes(){
      if(!currentTrackName)return;
      let savedTracks = JSON.parse(localStorage.getItem('savedTracks')) || [];
      const idx = savedTracks.findIndex(t => t.trackName === currentTrackName);
      if(idx >= 0){
        savedTracks[idx].bestTimes = bestTimes;
        localStorage.setItem('savedTracks', JSON.stringify(savedTracks));
      }
    }
    function saveCurrentTrack(){
      if(!currentTrack || currentTrack.length === 0){
        alert("No track to save!");
        return;
      }
      const trackName = prompt("Insert a name for this track:");
      if(!trackName)return;
      let savedTracks = JSON.parse(localStorage.getItem('savedTracks')) || [];
      const trackData = {
        trackName, 
        gates: currentTrack, 
        bestTimes
      };
      savedTracks.push(trackData);
      localStorage.setItem('savedTracks', JSON.stringify(savedTracks));
      currentTrackName = trackName;
      alert(`Track "${trackName}" has been saved!`);
      populateSavedTracksList();
    }
    function loadTrackByName(trackName){
      let savedTracks = JSON.parse(localStorage.getItem('savedTracks')) || [];
      const foundTrack = savedTracks.find(t => t.trackName === trackName);
      if(!foundTrack){
        alert(`Track "${trackName}" not found!`);
        return;
      }
      currentTrack = foundTrack.gates;
      currentTrackName = foundTrack.trackName;
      bestTimes = foundTrack.bestTimes || [];
      resetTrack(currentTrack, false);
      updateLeaderboard();
      statusOutput.textContent = `Loaded track "${trackName}"`;
    }
    function deleteTrackByName(trackName){
      let savedTracks = JSON.parse(localStorage.getItem('savedTracks')) || [];
      const newTracks = savedTracks.filter(t => t.trackName !== trackName);
      localStorage.setItem('savedTracks', JSON.stringify(newTracks));
      if(currentTrackName === trackName){
        currentTrackName = null;
        statusOutput.textContent =
          `Track "${trackName}" was deleted from storage (but you can still ski on it if you like).`;
      } else {
        statusOutput.textContent = `Track "${trackName}" has been deleted!`;
      }
      populateSavedTracksList();
    }
    function populateSavedTracksList(){
      let savedTracks = JSON.parse(localStorage.getItem('savedTracks')) || [];
      savedTracksSelect.innerHTML = '<option value="">Track</option>';
      savedTracks.forEach(trackObj => {
        const opt = document.createElement('option');
        opt.value = trackObj.trackName;
        opt.textContent = trackObj.trackName;
        savedTracksSelect.appendChild(opt);
      });
    }

    // Utility per ottenere le coordinate
    function getMouseCoords(e){
      const rect = canvas.getBoundingClientRect();
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;
      return {
        x: clientX - rect.left,
        y: clientY - rect.top
      };
    }

    // Eventi Bottoni
    sameTrackButton.addEventListener('click', () => {
      resetTrack(currentTrack);
    });
    differentTrackButton.addEventListener('click', () => {
      resetTrack(null, true);
      currentTrackName = null;
    });
    modeLabel.addEventListener('click', saveCurrentTrack);

    loadTrackButton.addEventListener('click', () => {
      const chosenTrackName = savedTracksSelect.value;
      if(!chosenTrackName){
        alert("Select a track first!");
        return;
      }
      loadTrackByName(chosenTrackName);
    });

    deleteTrackButton.addEventListener('click', () => {
      const chosenTrackName = savedTracksSelect.value;
      if(!chosenTrackName){
        alert("Select a track first!");
        return;
      }
      if(confirm(`Delete track "${chosenTrackName}" from storage?`)){
        deleteTrackByName(chosenTrackName);
      }
    });

    // Funzioni per esportare e importare il tracciato, con FileSaver.js per il download
    function exportTrack() {
      if (!currentTrack || currentTrack.length === 0) {
          alert("Non ci sono piste da esportare!");
          return;
      }
      const trackData = {
          trackName: currentTrackName || "Unnamed Track",
          gates: currentTrack,
          bestTimes: bestTimes
      };
      const trackDataStr = JSON.stringify(trackData);
      const blob = new Blob([trackDataStr], { type: 'application/json' });
      const filename = `${currentTrackName || "Unnamed Track"}.json`;
      
      // Utilizzo di FileSaver.js per forzare il salvataggio del file
      saveAs(blob, filename);
    }

    function importTrack(event) {
      const fileInput = event.target || document.getElementById('fileInput');
      const file = fileInput.files[0];
      if (!file) {
          alert("Seleziona un file da importare!");
          return;
      }
      const defaultTrackName = file.name.replace(/\.json$/, '');
      const confirmImport = confirm(`Vuoi importare la pista "${defaultTrackName}"?`);
      if (!confirmImport) return;
      const reader = new FileReader();
      reader.onload = function(event) {
          try {
              const trackData = JSON.parse(event.target.result);
              if (!trackData.gates || !Array.isArray(trackData.gates)) {
                  throw new Error("File non valido");
              }
              currentTrack = trackData.gates;
              currentTrackName = defaultTrackName;
              bestTimes = trackData.bestTimes || [];
              let savedTracks = JSON.parse(localStorage.getItem('savedTracks')) || [];
              const existingTrackIndex = savedTracks.findIndex(t => t.trackName === currentTrackName);
              const trackToSave = {
                  trackName: currentTrackName, 
                  gates: currentTrack, 
                  bestTimes: bestTimes
              };
              if (existingTrackIndex !== -1) {
                  savedTracks[existingTrackIndex] = trackToSave;
              } else {
                  savedTracks.push(trackToSave);
              }
              localStorage.setItem('savedTracks', JSON.stringify(savedTracks));
              resizeCanvas();
              drawTrack(currentTrack);
              updateLeaderboard();
              populateSavedTracksList();
              alert(`Pista "${currentTrackName}" importata e salvata con successo!`);
              fileInput.value = '';
          } catch (error) {
              alert("Errore durante l'importazione: " + error.message);
          }
      };
      reader.readAsText(file);
    }

    document.getElementById('exportButton').addEventListener('click', exportTrack);
    document.getElementById('importButton').addEventListener('click', importTrack);
    document.getElementById('importButton').addEventListener('click', () => {
      document.getElementById('fileInput').click();
    });
    document.getElementById('fileInput').addEventListener('change', importTrack);

    // Inizializzazione
    resizeCanvas();
    drawTrack();
    populateSavedTracksList();
  </script>
  <script type="text/babel">
    function Tutorial() {
      const [currentSlide, setCurrentSlide] = React.useState(0);
      const [showTutorial, setShowTutorial] = React.useState(true);

      const slides = [
        {
          title: "Benvenuto in Ski-Zag! ‚õ∑Ô∏è",
          content: "Impara a giocare e diventa campione üèÜ!"
        },
        {
          title: "Come Iniziare üéØ",
          content: "Parti dal box in alto üè† e traccia il tuo percorso con il dito. Devi passare correttamente tutte le porte per completare la discesa tagliando il traguardo üèÅ!"
        },
        {
          title: "Le Porte üö©",
          content: "Affronta le porte rosse e blu nell'ordine corretto. Le porte rosse vanno prese da sinistra a destra, quelle blu da destra a sinistra. Velocit√† e traiettoria pi√π breve concorreranno a definire il tuo tempo finale ‚è∞!"
        },
        {
          title: "Controlli del Gioco üéÆ",
          content: "üîÅ Rigioca sulla stessa pista\n‚èØÔ∏è Rivedi la discesa\n‚ú® Gioca su una nuova pista\n‚è∞ Classifica tempi Top 5"
        },
        {
          title: "Salvataggio e Caricamento üíæ",
          content: "Clicca in alto a sinistra sul tipo di pista (SuperG/Gigante/Speciale) per salvare il tracciato. Usa i controlli in basso per scrivere il nome del giocatore e per gestire, caricareüì• e cancellareüóëÔ∏è le piste salvate."
        }
      ];

      if (!showTutorial) return null;

      return (
        <div className="tutorial-overlay">
          <div className="tutorial-content">
            <button 
              className="close-button"
              onClick={() => setShowTutorial(false)}
            >
              √ó
            </button>
            
            <div className="tutorial-slide">
              <h2>{slides[currentSlide].title}</h2>
              <p style={{whiteSpace: 'pre-line'}}>{slides[currentSlide].content}</p>
            </div>

            <div className="tutorial-dots">
              {slides.map((_, index) => (
                <div 
                  key={index}
                  className={`dot ${currentSlide === index ? 'active' : ''}`}
                  onClick={() => setCurrentSlide(index)}
                />
              ))}
            </div>

            <div className="tutorial-nav">
              <button 
                className="nav-button"
                onClick={() => setCurrentSlide(prev => prev - 1)}
                disabled={currentSlide === 0}
              >
                ‚Üê
              </button>

              {currentSlide === slides.length - 1 ? (
                <button 
                  className="nav-button"
                  onClick={() => setShowTutorial(false)}
                >
                  Gioca!
                </button>
              ) : (
                <button 
                  className="skip-button"
                  onClick={() => setShowTutorial(false)}
                >
                  Salta
                </button>
              )}

              <button 
                className="nav-button"
                onClick={() => setCurrentSlide(prev => prev + 1)}
                disabled={currentSlide === slides.length - 1}
              >
                ‚Üí
              </button>
            </div>
          </div>
        </div>
      );
    }

    ReactDOM.render(<Tutorial />, document.getElementById('tutorial-root'));
  </script>
</body>
</html>
